// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  status    UserStatus @default(ACTIVE)
  isAdmin   Boolean  @default(false)
  
  // Profile information
  displayName String
  bio         String?
  avatar      String?
  gender      Gender?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relationships
  coupleId  String?
  couple    Couple?  @relation(fields: [coupleId], references: [id])
  
  // Security relationships
  loginAttempts UserLockout?
  loginHistory  LoginAttempt[]
  
  // Chat relationships
  chatConversations ChatConversation[]
  chatMessages      ChatMessage[]
  
  // Study relationships
  studyGoals        StudyGoal[]
  studyPlans        StudyPlan[]
  
  // Message Wall relationships
  sentMessages      MessageWallPost[]     @relation("SentMessages")
  receivedMessages  MessageWallPost[]     @relation("ReceivedMessages")
  messageReactions  MessageReaction[]
  
  @@map("users")
}

model Couple {
  id        String   @id @default(cuid())
  name      String?
  inviteCode String  @unique
  
  // Person information
  person1Id   String?
  person1Name String?
  person2Id   String?
  person2Name String?
  isComplete  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  users     User[]
  
  @@map("couples")
}

enum Role {
  USER
  COUPLE
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model SecuritySettings {
  id                String   @id @default(cuid())
  maxLoginAttempts  Int      @default(5)
  lockoutDuration   Int      @default(15) // 分钟
  sessionTimeout    Int      @default(60) // 分钟
  requireTwoFactor  Boolean  @default(false)
  allowedIPs        String[] @default([])
  
  // 密码策略
  passwordMinLength       Int     @default(8)
  passwordRequireUppercase Boolean @default(true)
  passwordRequireLowercase Boolean @default(true)
  passwordRequireNumbers   Boolean @default(true)
  passwordRequireSpecialChars Boolean @default(true)
  passwordMaxAge          Int     @default(90) // 天
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("security_settings")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  ip        String
  userAgent String?
  userId    String?
  username  String?
  success   Boolean
  reason    String?
  timestamp DateTime @default(now())
  
  // 关联用户（如果登录成功）
  user      User?    @relation(fields: [userId], references: [id])
  
  @@map("login_attempts")
}

model UserLockout {
  id        String   @id @default(cuid())
  userId    String?  @unique
  ip        String   @unique
  attempts  Int      @default(0)
  lockedAt  DateTime?
  unlockAt  DateTime?
  
  // 关联用户
  user      User?    @relation(fields: [userId], references: [id])
  
  @@map("user_lockouts")
}

model ChatConversation {
  id        String   @id @default(cuid())
  title     String?  // 对话标题，可选
  userId    String   // 对话所属用户
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]
  
  @@map("chat_conversations")
}

model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String   // 所属对话
  userId         String   // 消息所属用户
  role           String   // 'user' | 'assistant' | 'system'
  content        String   // 消息内容
  
  // 时间戳
  createdAt      DateTime @default(now())
  
  // 关联关系
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique // 设置键名，如 'maintenance', 'theme', 'seo' 等
  value     String   // JSON 格式的设置值
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("site_settings")
}

// 学习目标模型
model StudyGoal {
  id          String    @id @default(cuid())
  userId      String    // 目标所属用户
  title       String    // 目标标题，如"考研", "考公", "托福"
  description String?   // 目标描述
  targetDate  DateTime  // 目标日期
  isActive    Boolean   @default(true)
  
  // 时间戳
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("study_goals")
}

// 学习计划模型
model StudyPlan {
  id          String    @id @default(cuid())
  userId      String    // 计划所属用户
  title       String    // 计划标题
  description String?   // 计划描述
  planDate    DateTime  // 计划日期
  isCompleted Boolean   @default(false)
  
  // 时间戳
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       StudyTask[]
  
  @@map("study_plans")
}

// 学习任务模型
model StudyTask {
  id          String     @id @default(cuid())
  planId      String     // 所属计划
  title       String     // 任务标题
  description String?    // 任务描述
  taskType    TaskType   // 任务类型
  duration    Int?       // 持续时间（分钟）
  isCompleted Boolean    @default(false)
  completedAt DateTime?  // 完成时间
  
  // 时间戳
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // 关联关系
  plan        StudyPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@map("study_tasks")
}

enum TaskType {
  CHECKIN     // 打卡
  POMODORO    // 番茄时间
  READING     // 阅读
  EXERCISE    // 练习
  REVIEW      // 复习
  OTHER       // 其他
}

// 留言墙模型
model MessageWallPost {
  id          String    @id @default(cuid())
  senderId    String    // 发送者ID
  receiverId  String    // 接收者ID
  content     String    // 留言内容
  messageType MessageType @default(TEXT) // 留言类型
  visibility  MessageVisibility @default(PRIVATE) // 留言可见性
  
  // 附件信息
  attachments String[]  @default([]) // 附件URL数组（图片、贴图等）
  
  // 小惊喜相关
  surpriseType String?  // 惊喜类型（如：heart_rain, confetti, fireworks等）
  surpriseData String?  // 惊喜数据（JSON格式）
  
  // 状态
  isRead      Boolean   @default(false) // 是否已读
  isDeleted   Boolean   @default(false) // 是否已删除
  
  // 时间戳
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  sender      User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  reactions   MessageReaction[]
  
  @@map("message_wall_posts")
}

// 留言反应模型（点赞、爱心等）
model MessageReaction {
  id        String    @id @default(cuid())
  messageId String    // 留言ID
  userId    String    // 用户ID
  emoji     String    // emoji表情
  
  // 时间戳
  createdAt DateTime  @default(now())
  
  // 关联关系
  message   MessageWallPost @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 确保同一用户对同一留言的同一emoji只能有一个反应
  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

enum MessageType {
  TEXT        // 纯文本
  IMAGE       // 图片
  STICKER     // 贴图
  SURPRISE    // 小惊喜
  MIXED       // 混合类型（文本+图片/贴图）
}

enum MessageVisibility {
  PRIVATE     // 情侣留言，仅双方可见
  PUBLIC      // 个人留言，所有人可见
}
